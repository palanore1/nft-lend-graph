// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ActiveItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ActiveItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ActiveItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ActiveItem", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ActiveItem | null {
    return changetype<ActiveItem | null>(store.get_in_block("ActiveItem", id));
  }

  static load(id: string): ActiveItem | null {
    return changetype<ActiveItem | null>(store.get("ActiveItem", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get minLoanValue(): BigInt | null {
    let value = this.get("minLoanValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minLoanValue(value: BigInt | null) {
    if (!value) {
      this.unset("minLoanValue");
    } else {
      this.set("minLoanValue", Value.fromBigInt(<BigInt>value));
    }
  }

  get interestRate(): BigInt | null {
    let value = this.get("interestRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set interestRate(value: BigInt | null) {
    if (!value) {
      this.unset("interestRate");
    } else {
      this.set("interestRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get loanPeriod(): BigInt | null {
    let value = this.get("loanPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set loanPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("loanPeriod");
    } else {
      this.set("loanPeriod", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ActiveLoan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ActiveLoan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ActiveLoan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ActiveLoan", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ActiveLoan | null {
    return changetype<ActiveLoan | null>(store.get_in_block("ActiveLoan", id));
  }

  static load(id: string): ActiveLoan | null {
    return changetype<ActiveLoan | null>(store.get("ActiveLoan", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get loanValue(): BigInt | null {
    let value = this.get("loanValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set loanValue(value: BigInt | null) {
    if (!value) {
      this.unset("loanValue");
    } else {
      this.set("loanValue", Value.fromBigInt(<BigInt>value));
    }
  }

  get interestRate(): BigInt | null {
    let value = this.get("interestRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set interestRate(value: BigInt | null) {
    if (!value) {
      this.unset("interestRate");
    } else {
      this.set("interestRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get loanPeriod(): BigInt | null {
    let value = this.get("loanPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set loanPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("loanPeriod");
    } else {
      this.set("loanPeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get timeOfLoan(): BigInt | null {
    let value = this.get("timeOfLoan");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeOfLoan(value: BigInt | null) {
    if (!value) {
      this.unset("timeOfLoan");
    } else {
      this.set("timeOfLoan", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ItemCancelled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ItemCancelled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ItemCancelled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ItemCancelled", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ItemCancelled | null {
    return changetype<ItemCancelled | null>(
      store.get_in_block("ItemCancelled", id)
    );
  }

  static load(id: string): ItemCancelled | null {
    return changetype<ItemCancelled | null>(store.get("ItemCancelled", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class ItemListed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ItemListed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ItemListed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ItemListed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ItemListed | null {
    return changetype<ItemListed | null>(store.get_in_block("ItemListed", id));
  }

  static load(id: string): ItemListed | null {
    return changetype<ItemListed | null>(store.get("ItemListed", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get minLoanValue(): BigInt | null {
    let value = this.get("minLoanValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minLoanValue(value: BigInt | null) {
    if (!value) {
      this.unset("minLoanValue");
    } else {
      this.set("minLoanValue", Value.fromBigInt(<BigInt>value));
    }
  }

  get interestRate(): BigInt | null {
    let value = this.get("interestRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set interestRate(value: BigInt | null) {
    if (!value) {
      this.unset("interestRate");
    } else {
      this.set("interestRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get loanPeriod(): BigInt | null {
    let value = this.get("loanPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set loanPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("loanPeriod");
    } else {
      this.set("loanPeriod", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ItemLoaned extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ItemLoaned entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ItemLoaned must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ItemLoaned", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ItemLoaned | null {
    return changetype<ItemLoaned | null>(store.get_in_block("ItemLoaned", id));
  }

  static load(id: string): ItemLoaned | null {
    return changetype<ItemLoaned | null>(store.get("ItemLoaned", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get loanValue(): BigInt | null {
    let value = this.get("loanValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set loanValue(value: BigInt | null) {
    if (!value) {
      this.unset("loanValue");
    } else {
      this.set("loanValue", Value.fromBigInt(<BigInt>value));
    }
  }

  get interestRate(): BigInt | null {
    let value = this.get("interestRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set interestRate(value: BigInt | null) {
    if (!value) {
      this.unset("interestRate");
    } else {
      this.set("interestRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get loanPeriod(): BigInt | null {
    let value = this.get("loanPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set loanPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("loanPeriod");
    } else {
      this.set("loanPeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get timeOfLoan(): BigInt | null {
    let value = this.get("timeOfLoan");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeOfLoan(value: BigInt | null) {
    if (!value) {
      this.unset("timeOfLoan");
    } else {
      this.set("timeOfLoan", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class LoanPayed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LoanPayed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LoanPayed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LoanPayed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LoanPayed | null {
    return changetype<LoanPayed | null>(store.get_in_block("LoanPayed", id));
  }

  static load(id: string): LoanPayed | null {
    return changetype<LoanPayed | null>(store.get("LoanPayed", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get loanValue(): BigInt | null {
    let value = this.get("loanValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set loanValue(value: BigInt | null) {
    if (!value) {
      this.unset("loanValue");
    } else {
      this.set("loanValue", Value.fromBigInt(<BigInt>value));
    }
  }
}
