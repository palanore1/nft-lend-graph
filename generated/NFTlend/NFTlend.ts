// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ItemCancelled extends ethereum.Event {
  get params(): ItemCancelled__Params {
    return new ItemCancelled__Params(this);
  }
}

export class ItemCancelled__Params {
  _event: ItemCancelled;

  constructor(event: ItemCancelled) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ItemListed extends ethereum.Event {
  get params(): ItemListed__Params {
    return new ItemListed__Params(this);
  }
}

export class ItemListed__Params {
  _event: ItemListed;

  constructor(event: ItemListed) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get minLoanValue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get interestRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get loanPeriod(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ItemLoaned extends ethereum.Event {
  get params(): ItemLoaned__Params {
    return new ItemLoaned__Params(this);
  }
}

export class ItemLoaned__Params {
  _event: ItemLoaned;

  constructor(event: ItemLoaned) {
    this._event = event;
  }

  get lender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get loanValue(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get interestRate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get loanPeriod(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timeOfLoan(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class LoanPayed extends ethereum.Event {
  get params(): LoanPayed__Params {
    return new LoanPayed__Params(this);
  }
}

export class LoanPayed__Params {
  _event: LoanPayed;

  constructor(event: LoanPayed) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get loanValue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NFTlend__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getPerformData(): Bytes {
    return this.value1;
  }
}

export class NFTlend__getListingResultValue0Struct extends ethereum.Tuple {
  get minLoanValue(): BigInt {
    return this[0].toBigInt();
  }

  get interestRate(): BigInt {
    return this[1].toBigInt();
  }

  get loanPeriod(): BigInt {
    return this[2].toBigInt();
  }

  get owner(): Address {
    return this[3].toAddress();
  }
}

export class NFTlend__getLoanResultValue0Struct extends ethereum.Tuple {
  get nftAddress(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get borrower(): Address {
    return this[2].toAddress();
  }

  get lender(): Address {
    return this[3].toAddress();
  }

  get loanAmount(): BigInt {
    return this[4].toBigInt();
  }

  get interestRate(): BigInt {
    return this[5].toBigInt();
  }

  get loanPeriod(): BigInt {
    return this[6].toBigInt();
  }

  get timeOfLoan(): BigInt {
    return this[7].toBigInt();
  }
}

export class NFTlend extends ethereum.SmartContract {
  static bind(address: Address): NFTlend {
    return new NFTlend("NFTlend", address);
  }

  checkUpkeep(param0: Bytes): NFTlend__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new NFTlend__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<NFTlend__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTlend__checkUpkeepResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  getBorrowerProceeds(borrower: Address): BigInt {
    let result = super.call(
      "getBorrowerProceeds",
      "getBorrowerProceeds(address):(uint256)",
      [ethereum.Value.fromAddress(borrower)]
    );

    return result[0].toBigInt();
  }

  try_getBorrowerProceeds(borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowerProceeds",
      "getBorrowerProceeds(address):(uint256)",
      [ethereum.Value.fromAddress(borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLenderProceeds(lender: Address): BigInt {
    let result = super.call(
      "getLenderProceeds",
      "getLenderProceeds(address):(uint256)",
      [ethereum.Value.fromAddress(lender)]
    );

    return result[0].toBigInt();
  }

  try_getLenderProceeds(lender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLenderProceeds",
      "getLenderProceeds(address):(uint256)",
      [ethereum.Value.fromAddress(lender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListing(
    nftAddress: Address,
    tokenId: BigInt
  ): NFTlend__getListingResultValue0Struct {
    let result = super.call(
      "getListing",
      "getListing(address,uint256):((uint256,uint256,uint256,address))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return changetype<NFTlend__getListingResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListing(
    nftAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<NFTlend__getListingResultValue0Struct> {
    let result = super.tryCall(
      "getListing",
      "getListing(address,uint256):((uint256,uint256,uint256,address))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NFTlend__getListingResultValue0Struct>(value[0].toTuple())
    );
  }

  getLoan(borrower: Address): NFTlend__getLoanResultValue0Struct {
    let result = super.call(
      "getLoan",
      "getLoan(address):((address,uint256,address,address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(borrower)]
    );

    return changetype<NFTlend__getLoanResultValue0Struct>(result[0].toTuple());
  }

  try_getLoan(
    borrower: Address
  ): ethereum.CallResult<NFTlend__getLoanResultValue0Struct> {
    let result = super.tryCall(
      "getLoan",
      "getLoan(address):((address,uint256,address,address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NFTlend__getLoanResultValue0Struct>(value[0].toTuple())
    );
  }

  getUsers(): Array<Address> {
    let result = super.call("getUsers", "getUsers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getUsers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getUsers", "getUsers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class CancelListingCall extends ethereum.Call {
  get inputs(): CancelListingCall__Inputs {
    return new CancelListingCall__Inputs(this);
  }

  get outputs(): CancelListingCall__Outputs {
    return new CancelListingCall__Outputs(this);
  }
}

export class CancelListingCall__Inputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelListingCall__Outputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }
}

export class ListNFTCall extends ethereum.Call {
  get inputs(): ListNFTCall__Inputs {
    return new ListNFTCall__Inputs(this);
  }

  get outputs(): ListNFTCall__Outputs {
    return new ListNFTCall__Outputs(this);
  }
}

export class ListNFTCall__Inputs {
  _call: ListNFTCall;

  constructor(call: ListNFTCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minLoanValue(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get interestRate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get loanPeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ListNFTCall__Outputs {
  _call: ListNFTCall;

  constructor(call: ListNFTCall) {
    this._call = call;
  }
}

export class OfferLoanCall extends ethereum.Call {
  get inputs(): OfferLoanCall__Inputs {
    return new OfferLoanCall__Inputs(this);
  }

  get outputs(): OfferLoanCall__Outputs {
    return new OfferLoanCall__Outputs(this);
  }
}

export class OfferLoanCall__Inputs {
  _call: OfferLoanCall;

  constructor(call: OfferLoanCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OfferLoanCall__Outputs {
  _call: OfferLoanCall;

  constructor(call: OfferLoanCall) {
    this._call = call;
  }
}

export class PayBackLoanCall extends ethereum.Call {
  get inputs(): PayBackLoanCall__Inputs {
    return new PayBackLoanCall__Inputs(this);
  }

  get outputs(): PayBackLoanCall__Outputs {
    return new PayBackLoanCall__Outputs(this);
  }
}

export class PayBackLoanCall__Inputs {
  _call: PayBackLoanCall;

  constructor(call: PayBackLoanCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PayBackLoanCall__Outputs {
  _call: PayBackLoanCall;

  constructor(call: PayBackLoanCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get performData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class UpdateListingCall extends ethereum.Call {
  get inputs(): UpdateListingCall__Inputs {
    return new UpdateListingCall__Inputs(this);
  }

  get outputs(): UpdateListingCall__Outputs {
    return new UpdateListingCall__Outputs(this);
  }
}

export class UpdateListingCall__Inputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newLoanValue(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get newRate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get newPeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateListingCall__Outputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }
}

export class WithdrawLoanedAmountCall extends ethereum.Call {
  get inputs(): WithdrawLoanedAmountCall__Inputs {
    return new WithdrawLoanedAmountCall__Inputs(this);
  }

  get outputs(): WithdrawLoanedAmountCall__Outputs {
    return new WithdrawLoanedAmountCall__Outputs(this);
  }
}

export class WithdrawLoanedAmountCall__Inputs {
  _call: WithdrawLoanedAmountCall;

  constructor(call: WithdrawLoanedAmountCall) {
    this._call = call;
  }
}

export class WithdrawLoanedAmountCall__Outputs {
  _call: WithdrawLoanedAmountCall;

  constructor(call: WithdrawLoanedAmountCall) {
    this._call = call;
  }
}

export class WithdrawProceedsCall extends ethereum.Call {
  get inputs(): WithdrawProceedsCall__Inputs {
    return new WithdrawProceedsCall__Inputs(this);
  }

  get outputs(): WithdrawProceedsCall__Outputs {
    return new WithdrawProceedsCall__Outputs(this);
  }
}

export class WithdrawProceedsCall__Inputs {
  _call: WithdrawProceedsCall;

  constructor(call: WithdrawProceedsCall) {
    this._call = call;
  }
}

export class WithdrawProceedsCall__Outputs {
  _call: WithdrawProceedsCall;

  constructor(call: WithdrawProceedsCall) {
    this._call = call;
  }
}
